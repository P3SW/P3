@page "/"
@page "/overview"
@using ChartJs.Blazor.LineChart
@using ChartJs.Blazor.PieChart
@using System.Reflection.Emit

@* Font *@
<link href='https://fonts.googleapis.com/css?family=Roboto Slab' rel='stylesheet'>


<div class="summary_container">
    
    @* Summary text + runtime *@
    <div class="summary_caption_container" style="text-align: center;">Summary</div>
    
    @* Current running manager info *@
    <div class="Current_manager_info_container">
        <div>Current manager: DepartmentManager</div><br>
        <div>Manager Runtime: 00:06:51</div>
    </div>
    
    <div class="Current_manager_container">
        <div class="Current_manager_errors">Current manager errors: 17
            <ul class="error-reconciliation-formatting">
                <div class="circle background-red"></div><li>Fatal: 0</li>
                <div class="circle background-lightred"></div><li>Error: 2</li>
                <div class="circle background-yellow"></div><li>Warning: 5</li>
                <div class="circle background-green"></div><li>Info: 10</li>
            </ul>
        </div>
        <div class="Current_manager_reconciliations">Current manager reconciliations: 691
            <ul class="error-reconciliation-formatting">
                <div class="circle background-red"></div><li>Mismatch: 1</li>
                <div class="circle background-lightred"></div><li>Failed: 2</li>
                <div class="circle background-yellow"></div><li>Disabled: 8</li>
                <div class="circle background-green"></div><li>OK: 60</li>
            </ul>
        </div>
    </div>
    <div class="mind-the-gap">&nbsp;</div>
    
    @* Manager queue *@
    <div class="manager-queue-container">
        <div class="queue-finished-text">Finished: <b>8</b></div>
        <div class="queue-inqueue-text">In queue: <b>4</b></div>
    </div>
    
    @* Total manager info *@
    <div class="Total_errors_and_reconciliations_container">
        <div class="info_total_errors">Total Errors: @pieconfigTotalErrorsData.Sum()
            <ul class="error-reconciliation-formatting">
                <div class="circle background-red"></div><li>Fatal:  @pieconfigTotalErrorsData[0]</li>
                <div class="circle background-lightred"></div><li>Error: @pieconfigTotalErrorsData[1]</li>
                <div class="circle background-yellow"></div><li>Warning:  @pieconfigTotalErrorsData[2]</li>
                <div class="circle background-green"></div><li>Info:  @pieconfigTotalErrorsData[3]</li>
            </ul>
        </div>
        <div class="PieConfigTotalErrors">
            <Chart Config="_pieconfigTotalErrors" Height="50" Width="50"></Chart>
        </div>

        <div class="info_total_reconciliations">Total Reconciliations: @pieconfigTotalReconciliationsData.Sum()
            <ul class="error-reconciliation-formatting">
                <div class="circle background-red"></div><li>Mismatch: @pieconfigTotalReconciliationsData[0]</li>
                <div class="circle background-lightred"></div><li>Failed: @pieconfigTotalReconciliationsData[1]</li>
                <div class="circle background-yellow"></div><li>Disabled: @pieconfigTotalReconciliationsData[2]</li>
                <div class="circle background-green"></div><li>OK: @pieconfigTotalReconciliationsData[3]</li>
            </ul>
        </div>
        <div class="pieConfigTotalReconciliations">
            <Chart Config="_pieconfigTotalReconciliations" Height="50" Width="50"></Chart>
        </div>
    </div>
    
    @* Efficiency score table summary *@
    <div class="efficiency-container">
        <div class="efficiency-text">Median efficiency score: <b>2702</b></div><br/>
        <div class="efficiency-text">Total read: <b>17021044</b></div><br/>
        <div class="efficiency-text">Total written: <b>30461662</b></div>
    </div>
</div>

<div class="Overview-right">
    <div class="cpu_usage">
        <div class="chart-header">
            <div class="dropdown">
                <b class="selected-manager-name" title="@managers[selectedManager]">@(selectedManager + "-" + managers[selectedManager])</b>
                <img src="Icons/dropdown-arrow.svg" alt="dropdown-arrow" class="dropdown-arrow"/>
                <img src="Icons/dropup-arrow.svg" alt="dropup-arrow" class="dropup-arrow"/>
                <div class="dropdown-content">
                    @for (int i = 0, j = 0; i < managers.Count; i++) //id does not do anything as of right now, but might be useful later on
                    {
                        int managerID = i;
                        if (i == selectedManager)
                        {
                            continue;
                        }
                        else if (j == 0)
                        {
                            j++;
                            <div class="dropdown-content-first" title="@managers[managerID]" id="@managerID" @onclick="@(() => GetSelectedManagerID(managerID))">@(managerID + "-" + managers[managerID])</div>
                            continue;
                        }
                        <div title="@managers[managerID]" id="@managerID" @onclick="@(() => GetSelectedManagerID(managerID))">@(managerID + "-" + managers[managerID])</div>
                    }
                </div>
            </div>
            <div class="chart-title">
                Memory/CPU
            </div>
        </div> 
        <div style="position: relative; width: 90%; left: 5%">
            <Chart Config="_lineconfig"></Chart>
        </div>
        <div class="info-labels">
            <div class="oblong background-lightred"></div><div class="cpu_text">CPU</div>
            <div class="oblong background-green"></div><div class="memory_text">Memory</div>
        </div>
    </div>
    <div class="efficiency">
        
    </div>
</div>

@code{
    private LineConfig _lineconfig;
    private PieConfig _pieconfigTotalErrors;
    private PieConfig _pieconfigTotalReconciliations;
    PieDataset<int> pieconfigTotalErrorsData;
    PieDataset<int> pieconfigTotalReconciliationsData;
    
    

    protected override void OnInitialized()
    {
        ConfigureLineConfig();
        ConfigurePieConfig();
    }

    private void ConfigureLineConfig()
    {
        _lineconfig = new LineConfig();
        _lineconfig.Options = new LineOptions
        {
            Responsive = true,
            Title = new OptionsTitle
            {
                Display = false,
                Text = "Cpu & Memory usage",
                FontColor = "#FFFFFF"
            },
            Legend = new Legend
            {
                Position = Position.Bottom,
                Display = false,
            },
            Hover = new Hover
            {
                Mode = InteractionMode.Nearest,
                Intersect = true
            },
            Scales = new Scales
            {
                XAxes = new List<CartesianAxis> //scale for the x axes
                {
                    new CategoryAxis
                    {
                        ScaleLabel = new ScaleLabel
                        {
                            Display = true,
    //LabelString = "Time",
                            FontColor = "#FFFFFF",
                            FontSize = 15,
                        },
                        Ticks = new CategoryTicks
                        {
                            FontColor = "#FFFFFF",
                            FontSize = 13,
                        },
                        GridLines = new GridLines
                        {
                            Color = ColorUtil.ColorHexString(142, 142, 142),
                        },
                    },
                },
                YAxes = new List<CartesianAxis> // scale for the y axes
                {
                    new LinearCartesianAxis
                    {
                        ScaleLabel = new ScaleLabel
                        {
                            Display = true,
    //LabelString = "Usage %",
                            FontColor = "#FFFFFF",
                            FontSize = 15,
                        },
                        Ticks = new LinearCartesianTicks
                        {
                            FontSize = 13,
                            Padding = 10,
                            FontColor = "#FFFFFF", // Color for ticks, values on y axies
                        },
                        GridLines = new GridLines
                        {
                            Color = ColorUtil.ColorHexString(142, 142, 142),
                            DrawBorder = false, // removes the border in the y axies

                        }
                    }
                }
            }
        };
        
        var lineconfigdataset1 = new LineDataset<int>(new[]{70,90,87,100,87,100,70,40,70,43, 20, 10})
        {
            Label = "Cpu usage",
            BorderColor = ColorUtil.ColorHexString(227,95,82),
            BackgroundColor = ColorUtil.ColorString(0,0,0,0.0),
            LineTension = 0,

        };
        var lineconfigdataset2 = new LineDataset<int>(new[] {2,5,8,2,6,47,32,5,9,12, 20, 30 })
        {
            Label = ("Memory usage"),
            BorderColor = ColorUtil.ColorString(92,188,169,1),
            BackgroundColor = ColorUtil.ColorString(92,188,169,0.3),
            LineTension = 0,
            

        };
        foreach (var party in new[]{"01:02","","01:05","","01:05","","01:12","","01:17", "01:25", "01:30"})
        {
            _lineconfig.Data.Labels.Add(party);
        }
        _lineconfig.Data.Datasets.Add(lineconfigdataset1);
        _lineconfig.Data.Datasets.Add(lineconfigdataset2);
    }
    private T SetUpPieLabels<T>(T config, string[] labels) where T : PieConfig
    {
        foreach (var label in labels)
        {
            config.Data.Labels.Add(label);
        }
        
        return config;
    }

    private void ConfigurePieConfig()
    {
        _pieconfigTotalErrors = new PieConfig();
        _pieconfigTotalReconciliations = new PieConfig();

        _pieconfigTotalErrors.Options = new PieOptions
        {
            Responsive = true,
            Title = new OptionsTitle
            {
                Display = false,
                Text = "Total Errors",
                FontColor = "#FFFFFF",
            },
            CutoutPercentage = 45,
            Legend =new Legend
            {
                Display = false,
            },
        };
        _pieconfigTotalReconciliations.Options = _pieconfigTotalErrors.Options;
        
        _pieconfigTotalErrors = SetUpPieLabels(_pieconfigTotalErrors, new[] {"Fatal error","Error","Warning","Info"});
        _pieconfigTotalReconciliations = SetUpPieLabels(_pieconfigTotalReconciliations, new[] {"Mismatch","Failed","Disabled", "OK"});
        
        pieconfigTotalErrorsData = new PieDataset<int>(new[] {1,15,20,30 }) //Datapoints
        {
            BackgroundColor = new[]   // Color for the pies
            {
                ColorUtil.ColorHexString(255, 23, 0), //Fatal Error
                ColorUtil.ColorHexString(227, 95, 82), //Error
                ColorUtil.ColorHexString(221, 155, 43), //Warning
                ColorUtil.ColorHexString(92, 188, 169)  //Info
            },
            BorderColor = ColorUtil.ColorHexString(0,0,0), 
            BorderWidth = 0,
            
        };
        pieconfigTotalReconciliationsData = new PieDataset<int>(new[] {5, 10, 15, 661})
        {
            BackgroundColor = new[] // Color for the pies
            {
                ColorUtil.ColorHexString(255, 23, 0), //Mismatch
                ColorUtil.ColorHexString(227, 95, 82), //Failed
                ColorUtil.ColorHexString(221, 155, 43), //Disabled
                ColorUtil.ColorHexString(92, 188, 169) //OK
            },
            BorderColor = ColorUtil.ColorHexString(0, 0, 0),
            BorderWidth = 0,
        };
        _pieconfigTotalErrors.Data.Datasets.Add(pieconfigTotalErrorsData);
        _pieconfigTotalReconciliations.Data.Datasets.Add(pieconfigTotalReconciliationsData);
    }
}


@code{
    //private string[] managers = {"manager1", "manager2", "manager3", "manager4"};
    static List<string> CreateList()
    {
        List<string> managers = new List<string>();
        managers = GetManagerNames(managers);

        List<string> GetManagerNames(List<string> managers)
        {
            string managerName = default;
        
            for (int i = 0; i < 20; i++)
            {
                managerName += (string)"M";
                managers.Add(managerName);
            }
            return managers;
        }

        return managers;
    }

    List<string> managers = CreateList();

    

    int selectedManager { get; set; }
    
    public void GetSelectedManagerID(int selectedID)
    {
        selectedManager = selectedID;
    }
}
