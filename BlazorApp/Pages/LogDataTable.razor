@using BlazorApp.Data
@using System.Reflection.Metadata
@using System.Net.Sockets
@using Radzen.Blazor
@using BlazorApp.DataStreaming.Events


<RadzenTabs id="log-tab">
    <Tabs>
        <RadzenTabsItem Text="ALL" class="TabElement">
            <RadzenDataGrid @ref="@DataGridRef" AllowFiltering="true" AllowColumnResize="true" FilterMode="FilterMode.Advanced" PageSize="50"
                            AllowPaging="true" AllowSorting="true" Data="@LogDataList" TItem="LogData"
                            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                            LogicalFilterOperator="LogicalFilterOperator.Or" CellRender="@CellRender">
                <Columns>
                    <RadzenDataGridColumn TItem="LogData" Property="ManagerName" Filterable="true"
                                          Title="Manager name" Frozen="true" Width="400px">
                        <Template Context="data">
                            <div style="display: grid; width: 400px; max-width: 400px; text-overflow: ellipsis; white-space: nowrap;" title="@data.ManagerName">
                                <span style="color: #FFFFFF; ">@Utility.ShortenManagerName(data.ManagerName)</span>
                            </div>
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="LogData" Property="Grade" Filterable="false" Title="@GradeName" Frozen="true" Width="200px">
                        <Template Context="data">
                            @if (data.Grade == Grades[0])
                            {
                                <span style='color:#5CBCA9'>@data.Grade</span>
                            }
                            else if (data.Grade == Grades[1])
                            {
                                <span style="color:#DD9B2B">@data.Grade</span>
                            }
                            else if (data.Grade == Grades[2])
                            {
                                <span style="color:#E35F52">@data.Grade</span>
                            }
                            else
                            {
                                <span style="color:#FF1700">@data.Grade</span>
                            }
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="LogData" Property="Timestamp" Title="Timestamp" Frozen="true" Width="300px">
                        <Template Context="data">
                            <span style="color: #FFFFFF">@data.Timestamp</span>
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="LogData" Property="Description" Filterable="true" Title="Message" Frozen="true" Width="800px">
                        <Template Context="data">
                            <div style="display: grid;">
                                <span style="align-self: center; color: #FFFFFF; overflow-x: auto;">@data.Description</span>
                            </div>
                        </Template>
                    </RadzenDataGridColumn>
                </Columns>
            </RadzenDataGrid>
        </RadzenTabsItem>
        <RadzenTabsItem Text="@Grades[3]" class="TabElement">
            <RadzenDataGrid @ref="@DataGridRef" AllowFiltering="true" AllowColumnResize="true" FilterMode="FilterMode.Advanced" PageSize="50"
                            AllowPaging="true" AllowSorting="true" Data="@LogDataList" TItem="LogData"
                            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                            LogicalFilterOperator="LogicalFilterOperator.Or" CellRender="@CellRender">
                <Columns>
                    <RadzenDataGridColumn TItem="LogData" Property="ManagerName" Filterable="false" Title="Manager name"
                                          Frozen="true" Width="400px">
                        <Template Context="data">
                            <div style="display: grid; width: 400px; max-width: 400px; text-overflow: ellipsis; white-space: nowrap;" title="@data.ManagerName">
                                <span style="color: #FFFFFF">@Utility.ShortenManagerName(data.ManagerName)</span>
                            </div>
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="LogData" Property="Grade" Title="@GradeName" Frozen="true" Width="200px"
                                          FilterValue=@Grades[3] FilterOperator="FilterOperator.Equals">
                        <Template Context="data">
                            <span style='color:#FF1700'>@data.Grade</span>
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="LogData" Property="Timestamp" Filterable="false" Title="Timestamp" Frozen="true" Width="300px">
                        <Template Context="data">
                            <span style="color: #FFFFFF">@data.Timestamp</span>
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="LogData" Property="Description" Filterable="false" Title="Message" Frozen="true" Width="800px">
                        <Template Context="data">
                            <div style="display: grid;">
                                <span style="align-self: center; color: #FFFFFF; overflow-x: auto;">@data.Description</span>
                            </div>
                        </Template>
                    </RadzenDataGridColumn>
                </Columns>
            </RadzenDataGrid>
        </RadzenTabsItem>
        <RadzenTabsItem Text="@Grades[2]" class="TabElement">
            <RadzenDataGrid @ref="@DataGridRef" AllowFiltering="true" AllowColumnResize="true" FilterMode="FilterMode.Advanced" PageSize="50"
                            AllowPaging="true" AllowSorting="true" Data="@LogDataList" TItem="LogData"
                            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                            LogicalFilterOperator="LogicalFilterOperator.Or" CellRender="@CellRender">
                <Columns>
                    <RadzenDataGridColumn TItem="LogData" Property="ManagerName" Filterable="false" Title="Manager name"
                                          Frozen="true" Width="400px">
                        <Template Context="data">
                            <div style="display: grid; width: 400px; max-width: 400px; text-overflow: ellipsis; white-space: nowrap;" title="@data.ManagerName">
                                <span style="color: #FFFFFF">@Utility.ShortenManagerName(data.ManagerName)</span>
                            </div>
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="LogData" Property="Grade" Filterable="true" Title="@GradeName" Frozen="true" Width="200px"
                                          FilterValue=@Grades[2] FilterOperator="FilterOperator.Equals">
                        <Template Context="data">
                            <span style='color:#E35F52'>@data.Grade</span>
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="LogData" Property="Timestamp" Filterable="false" Title="Timestamp" Frozen="true" Width="300px">
                        <Template Context="data">
                            <span style="color: #FFFFFF">@data.Timestamp</span>
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="LogData" Property="Description" Filterable="false" Title="Message" Frozen="true" Width="800px">
                        <Template Context="data">
                            <div style="display: grid;">
                                <span style="align-self: center; color: #FFFFFF; overflow-x: auto;">@data.Description</span>
                            </div>
                        </Template>
                    </RadzenDataGridColumn>
                </Columns>
            </RadzenDataGrid>
        </RadzenTabsItem>
        <RadzenTabsItem Text="@Grades[1]" class="TabElement">
            <RadzenDataGrid @ref="@DataGridRef" AllowFiltering="true" AllowColumnResize="true" FilterMode="FilterMode.Advanced" PageSize="50"
                            AllowPaging="true" AllowSorting="true" Data="@LogDataList" TItem="LogData"
                            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                            LogicalFilterOperator="LogicalFilterOperator.Or" CellRender="@CellRender">
                <Columns>
                    <RadzenDataGridColumn TItem="LogData" Property="ManagerName" Filterable="false" Title="Manager name"
                                          Frozen="true" Width="400px">
                        <Template Context="data">
                            <div style="display: grid; width: 400px; max-width: 400px; text-overflow: ellipsis; white-space: nowrap;" title="@data.ManagerName">
                                <span style="color: #FFFFFF">@Utility.ShortenManagerName(data.ManagerName)</span>
                            </div>
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="LogData" Property="Grade" Filterable="true" Title="@GradeName" Frozen="true" Width="200px"
                                          FilterValue=@Grades[1] FilterOperator="FilterOperator.Equals">
                        <Template Context="data">
                            <span style='color:#DD9B2B'>@data.Grade</span>
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="LogData" Property="Timestamp" Filterable="false" Title="Timestamp" Frozen="true" Width="300px">
                        <Template Context="data">
                            <span style="color: #FFFFFF">@data.Timestamp</span>
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="LogData" Property="Description" Filterable="false" Title="Message" Frozen="true" Width="800px">
                        <Template Context="data">
                            <div style="display: grid;">
                                <span style="align-self: center; color: #FFFFFF; overflow-x: auto;">@data.Description</span>
                            </div>
                        </Template>
                    </RadzenDataGridColumn>
                </Columns>
            </RadzenDataGrid>
        </RadzenTabsItem>
        <RadzenTabsItem Text="@Grades[0]" class="TabElement">
            <RadzenDataGrid @ref="@DataGridRef" AllowFiltering="true" AllowColumnResize="true" FilterMode="FilterMode.Advanced" PageSize="50"
                            AllowPaging="true" AllowSorting="true" Data="@LogDataList" TItem="LogData"
                            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                            LogicalFilterOperator="LogicalFilterOperator.Or" CellRender="@CellRender">
                <Columns>
                    <RadzenDataGridColumn TItem="LogData" Property="ManagerName" Filterable="false" Title="Manager name"
                                          Frozen="true" Width="400px">
                        <Template Context="data">
                            <div style="display: grid; width: 400px; max-width: 400px; text-overflow: ellipsis; white-space: nowrap;" title="@data.ManagerName">
                                <span style="color: #FFFFFF">@Utility.ShortenManagerName(data.ManagerName)</span>
                            </div>
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="LogData" Property="Grade" Filterable="true" Title="@GradeName" Frozen="true" Width="200px"
                                          FilterValue=@Grades[0] FilterOperator="FilterOperator.Equals">
                        <Template Context="data">
                            <span style='color:#5CBCA9'>@data.Grade</span>
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="LogData" Property="Timestamp" Filterable="false" Title="Timestamp" Frozen="true" Width="300px">
                        <Template Context="data">
                            <span style="color: #FFFFFF">@data.Timestamp</span>
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="LogData" Property="Description" Filterable="false" Title="Message" Frozen="true" Width="800px">
                        <Template Context="data">
                            <div style="display: grid;">
                                <span style="align-self: center; color: #FFFFFF; overflow-x: auto;">@data.Description</span>
                            </div>
                        </Template>
                    </RadzenDataGridColumn>
                </Columns>
            </RadzenDataGrid>
        </RadzenTabsItem>
    </Tabs>
</RadzenTabs>



@code {
    //Parameters for the component which are assigned when the component is instantiated
    [Parameter] public List<LogData> LogDataList { get; set; }
    [Parameter] public RadzenDataGrid<LogData> DataGridRef { get; set; }
    [Parameter] public string Type { get; set; }
    [Parameter] public List<string> Grades { get; set; }
    [Parameter] public string GradeName { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        
        if (LogDataList == null)
        {
            LogDataList = await Task.Run(() => ConversionDataAssigner.GetLogList(Type));
            StateHasChanged(); 
        }

        if (Type == "error")
        {
            ErrorUpdateTriggered += async (_, args) =>
            {
                LogDataList.AddRange(args.NewLogDataList);
                await InvokeAsync(DataGridRef.Reload);
                await InvokeAsync(StateHasChanged);
            };
        }
        else
        {
            ReconUpdateTriggered += async (_, args) =>
            {
                LogDataList.AddRange(args.ReconDataList);
                await InvokeAsync(DataGridRef.Reload);
                await InvokeAsync(StateHasChanged);
            };
        }
        
    }
    
    //When rendering the cells, change the background color and remove the border.
    void CellRender(DataGridCellRenderEventArgs<LogData> dataGridCellRenderEventArgs)
    {
        dataGridCellRenderEventArgs.Attributes.Add("style", $"background-color: #384561; border: none !important;");
    }
}
